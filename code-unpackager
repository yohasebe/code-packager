#!/bin/bash

# Version information
VERSION="0.4.0"

# Function to display help
show_help() {
    echo "Usage: $0 -j <json_file> -d <destination_directory> [options]"
    echo ""
    echo "Options:"
    echo "  -j <json_file>            Path to the JSON file generated by code-packager."
    echo "  -d <destination_directory> Path to the directory where the folder structure should be restored."
    echo "  -s, --silent             Skip confirmation before restoration."
    echo "  -v, --version            Display version information and exit."
    echo "  -h, --help               Display this help and exit."
    echo ""
}

# Function to display version
show_version() {
    echo "Code Unpackager for Language Models - Version $VERSION"
}

# Parse command line arguments
SILENT=false
while getopts "j:d:svh-" opt; do
    case $opt in
        j) JSON_FILE="${OPTARG}" ;;
        d) DESTINATION_DIRECTORY="${OPTARG}" ;;
        s) SILENT=true ;;
        v) show_version
           exit 0 ;;
        h) show_help
           exit 0 ;;
        -) case "${OPTARG}" in
             version) show_version
                      exit 0 ;;
             help) show_help
                   exit 0 ;;
             silent) SILENT=true ;;
             *) echo "Error: Invalid option -${OPTARG}. Use -h or --help for usage information." >&2
                exit 1 ;;
           esac ;;
    esac
done

# Check if required parameters are provided
if [ -z "$JSON_FILE" ] || [ -z "$DESTINATION_DIRECTORY" ]; then
    echo "Error: Both JSON file path and destination directory are required."
    show_help
    exit 1
fi

# Check if JSON file exists
if [ ! -f "$JSON_FILE" ]; then
    echo "Error: JSON file '$JSON_FILE' does not exist."
    exit 1
fi

# Confirm restoration unless silent mode is enabled
if [ "$SILENT" = false ]; then
    read -p "Are you sure you want to restore the folder structure to '$DESTINATION_DIRECTORY'? (y/n): " confirm
    if [ "$confirm" != "y" ]; then
        echo "Operation cancelled."
        exit 0
    fi
fi

# Create destination directory if it doesn't exist
mkdir -p "$DESTINATION_DIRECTORY"

# Iterate through the files in the JSON file
jq -c '.files[]' "$JSON_FILE" | while read -r file; do
    filename=$(echo "$file" | jq -r '.filename')
    content=$(echo "$file" | jq -r '.content')
    path=$(echo "$file" | jq -r '.path')

    # Create the directory structure
    full_path="$DESTINATION_DIRECTORY$path"
    mkdir -p "$full_path"

    # Write the file content
    if [ "$content" != "null" ]; then
        echo "$content" > "$full_path/$filename"
    else
        # Create an empty file for binary files (content is null)
        touch "$full_path/$filename"
    fi
done

echo "Folder structure restored to: $DESTINATION_DIRECTORY"
